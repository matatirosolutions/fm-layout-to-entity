<?php
declare(strict_types=1);

namespace Console;


class Components
{
    public static function header(string $entity, string $layout, bool $repo): string
    {
        $repoString = $repo ? sprintf('@ORM\Entity(repositoryClass="App\Repository\%sRepository")', $entity) : '';

        return <<<EOPHP
<?php
declare(strict_types=1);

namespace App\Entity;

use DateTime;
use Doctrine\ORM\Mapping as ORM;

/**
 * {$entity}
 *
 * @ORM\Table(name="{$layout}")
 * {$repoString}
 */
class {$entity}
{
    /**
     * @ORM\Column(name="rec_id", type="integer")
     */
    private int \$id;

EOPHP;

    }

    public static function Text($field): string
    {
        $col = self::getColName($field);
        $param = self::getParamName($field);
        return <<<EOPHP

    /**
     * @ORM\Column(name="{$col}", type="string", length=255)
     */
    private string \${$param};
    
EOPHP;
    }

    public static function Number($field): string
    {
        $col = self::getColName($field);
        $param = self::getParamName($field);

        return <<<EOPHP

    /**
     * @ORM\Column(name="{$col}", type="integer")
     */
    private int \${$param};
    
EOPHP;
    }

    public static function Date($field): string
    {
        $col = self::getColName($field);
        $param = self::getParamName($field);

        return <<<EOPHP

    /**
     * @ORM\Column(name="{$col}", type="fmdate")
     */
    private DateTime \${$param};
    
EOPHP;
    }

    public static function Time($field): string
    {
        $col = self::getColName($field);
        $param = self::getParamName($field);

        return <<<EOPHP

    /**
     * @ORM\Column(name="{$col}", type="fmtime")
     */
    private DateTime \${$param};
    
EOPHP;
    }

    public static function Timestamp($field): string
    {
        $col = self::getColName($field);
        $param = self::getParamName($field);

        return <<<EOPHP

    /**
     * @ORM\Column(name="{$col}", type="fmdatetime")
     */
    private DateTime \${$param};
    
EOPHP;
    }

    public static function Container($field): string
    {
        $col = self::getColName($field);
        $param = self::getParamName($field);

        return <<<EOPHP

    /**
     * @ORM\Column(name="{$col}", type="string", length=255)
     */
    private string \${$param};
    
EOPHP;
    }

    public static function footer(): string
    {
        return <<<EOPHP

}
EOPHP;

    }

    private static function getColName($field): string
    {
        return strpos($field, '::') !== false ? "'{$field}'" : $field;
    }

    private static function getParamName($field): string
    {
        return lcfirst(
            str_replace(['::', '.', '_', ' '], '', $field)
        );
    }

    public static function repo($entity): string
    {
        $entityPath = explode('/', $entity);
        $entity = array_pop($entityPath);
        $folder = count($entityPath) ? '\\' . implode('\\', $entityPath) : '';

        return <<<EOPHP
<?php
declare(strict_types=1);
 
namespace App\Repository{$folder};

use App\Entity{$folder}\\{$entity};
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * {$entity}Repository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class {$entity}Repository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry \$registry)
    {
        parent::__construct(\$registry, {$entity}::class);
    }
}
EOPHP;
    }

}
